<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:material="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:LiveSense">
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <Style TargetType="{x:Type ButtonBase}" x:Key="MaterialDesignProgressToolBarButton">
        <Setter Property="Padding" Value="8"/>
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="35"/>
        <Setter Property="Width" Value="35"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="TextBlock.FontWeight" Value="DemiBold"/>
        <Setter Property="material:ShadowAssist.ShadowDepth" Value="Depth0"/>
        <Setter Property="material:TransitionAssist.DisableTransitions" Value="True"/>
        <Setter Property="material:RippleAssist.Feedback" Value="{DynamicResource MaterialDesignFlatButtonRipple}"/>
        <Setter Property="material:ButtonProgressAssist.IndicatorForeground" Value="{DynamicResource PrimaryHueLightForegroundBrush}" />
        <Setter Property="material:ButtonProgressAssist.IndicatorBackground" Value="{StaticResource PrimaryHueLightBrush}" />
        <Setter Property="material:ButtonProgressAssist.Opacity" Value=".4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <AdornerDecorator>
                            <Grid>
                                <Border Background="Transparent" 
                                        CornerRadius="3"
                                        x:Name="border"/>
                                <ProgressBar x:Name="ProgressBar"
                                             Style="{DynamicResource MaterialDesignLinearProgressBar}"
                                             Minimum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ButtonProgressAssist.Minimum)}"
                                             Maximum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ButtonProgressAssist.Maximum)}"
                                             Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ButtonProgressAssist.IndicatorForeground)}"
                                             Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ButtonProgressAssist.IndicatorBackground)}"
                                             Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ButtonProgressAssist.Value)}"
                                             IsIndeterminate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ButtonProgressAssist.IsIndeterminate)}"
                                             Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ButtonProgressAssist.IsIndicatorVisible), Converter={StaticResource BooleanToVisibilityConverter}}"
                                             Height="{TemplateBinding Height}"
                                             Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ButtonBase}}, Path=ActualWidth}"
                                             Opacity="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ButtonProgressAssist.Opacity)}"
                                             HorizontalAlignment="Left"
                                             VerticalAlignment="Center">
                                </ProgressBar>
                            </Grid>
                        </AdornerDecorator>
                        <material:Ripple Content="{TemplateBinding Content}" 
                                         ContentTemplate="{TemplateBinding ContentTemplate}" 
                                         Focusable="False"
                                         ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                         Padding="{TemplateBinding Padding}"
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <material:Ripple.Clip>
                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                    <Binding ElementName="border" Path="ActualWidth" />
                                    <Binding ElementName="border" Path="ActualHeight" />
                                    <Binding ElementName="border" Path="CornerRadius" />
                                    <Binding ElementName="border" Path="BorderThickness" />
                                </MultiBinding>
                            </material:Ripple.Clip>
                        </material:Ripple>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value=".56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource MaterialDesignFlatButtonClick}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource MaterialDesignFlatButtonClick}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="MaterialDesignToolBarPopupBox" TargetType="material:PopupBox" BasedOn="{StaticResource MaterialDesignPopupBox}">
        <Setter Property="ToggleContent" Value="{StaticResource MaterialDesignPopupBoxToggleContent}" />
        <Setter Property="material:RippleAssist.Feedback" Value="{DynamicResource MaterialDesignFlatButtonRipple}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="PopupHorizontalOffset" Value="5"/>
        <Setter Property="PopupVerticalOffset" Value="5"/>
        <Setter Property="material:ShadowAssist.ShadowDepth" Value="Depth3" />
        <Setter Property="TextElement.FontWeight" Value="Normal" />
        <Setter Property="Padding" Value="0 8 0 8" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type material:PopupBox}">
                    <ControlTemplate.Resources>
                        <Style TargetType="Separator" BasedOn="{StaticResource MaterialDesignSeparator}"/>
                        <Style TargetType="ToggleButton" x:Key="ToggleButtonStyle">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <material:Ripple Content="{TemplateBinding Content}" 
                                                            ContentTemplate="{TemplateBinding ContentTemplate}" 
                                                            Focusable="False"
                                                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                            Padding="{TemplateBinding Padding}"
                                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                            <material:Ripple.Clip>
                                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                                    <Binding ElementName="border" Path="ActualWidth" />
                                                    <Binding ElementName="border" Path="ActualHeight" />
                                                    <Binding ElementName="border" Path="CornerRadius" />
                                                    <Binding ElementName="border" Path="BorderThickness" />
                                                </MultiBinding>
                                            </material:Ripple.Clip>
                                        </material:Ripple>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid>
                        <AdornerDecorator>
                            <Grid>
                                <Border Background="Transparent" 
                                        CornerRadius="3"
                                        x:Name="border"/>
                            </Grid>
                        </AdornerDecorator>
                        <ToggleButton x:Name="PART_Toggle" 
                                      Style="{StaticResource ToggleButtonStyle}" 
                                      IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}"
                                      Content="{TemplateBinding ToggleContent}" 
                                      ContentTemplate="{TemplateBinding ToggleContentTemplate}"
                                      Cursor="Hand" 
                                      TabIndex="{TemplateBinding TabIndex}" 
                                      VerticalAlignment="Center" 
                                      IsTabStop="{TemplateBinding IsTabStop}"
                                      HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                      VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <material:PopupEx x:Name="PART_Popup" 
                                            IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}"
                                            CustomPopupPlacementCallback="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PopupPlacementMethod}"
                                            HorizontalOffset="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PopupHorizontalOffset}"
                                            VerticalOffset="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PopupVerticalOffset}"
                                            PlacementTarget="{Binding ElementName=PART_Toggle}"
                                            Placement="Custom"
                                            PopupAnimation="Fade"
                                            AllowsTransparency="True">
                            <material:Card Content="{TemplateBinding PopupContent}" 
                                            ContentTemplate="{TemplateBinding PopupContentTemplate}"
                                            Foreground="{DynamicResource MaterialDesignBody}"
                                            Padding="{TemplateBinding Padding}"
                                            RenderOptions.ClearTypeHint="Enabled"
                                            Margin="5">
                                <material:Card.Resources>
                                    <Style TargetType="Button" BasedOn="{StaticResource MaterialDesignPopupBoxButton}" />
                                </material:Card.Resources>
                            </material:Card>
                        </material:PopupEx>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value=".56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource MaterialDesignFlatButtonClick}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource MaterialDesignFlatButtonClick}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignToolBarToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="35"/>
        <Setter Property="Width" Value="35"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="TextBlock.FontWeight" Value="DemiBold"/>
        <Setter Property="material:ShadowAssist.ShadowDepth" Value="Depth0"/>
        <Setter Property="material:TransitionAssist.DisableTransitions" Value="True"/>
        <Setter Property="material:RippleAssist.Feedback" Value="{DynamicResource MaterialDesignFlatButtonRipple}"/>
        <Setter Property="Focusable" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <AdornerDecorator>
                            <Grid>
                                <Border Background="Transparent" 
                                        CornerRadius="3"
                                        x:Name="border"/>
                            </Grid>
                        </AdornerDecorator>
                        <material:Ripple x:Name="ContentPresenter" 
                                         Content="{TemplateBinding Content}" 
                                         ContentTemplate="{TemplateBinding ContentTemplate}" 
                                         Focusable="False"
                                         ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                         Padding="{TemplateBinding Padding}"
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <material:Ripple.Clip>
                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                    <Binding ElementName="border" Path="ActualWidth" />
                                    <Binding ElementName="border" Path="ActualHeight" />
                                    <Binding ElementName="border" Path="CornerRadius" />
                                    <Binding ElementName="border" Path="BorderThickness" />
                                </MultiBinding>
                            </material:Ripple.Clip>
                        </material:Ripple>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="material:ToggleButtonAssist.HasOnContent" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentPresenter" Property="Content" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ToggleButtonAssist.OnContent)}" />
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ToggleButtonAssist.OnContentTemplate)}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value=".56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource MaterialDesignFlatButtonClick}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource MaterialDesignFlatButtonClick}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type TabControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabControl">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <TabPanel IsItemsHost="True"
                                    Grid.Row="0"
                                    Panel.ZIndex="100" 
                                    Background="{StaticResource MaterialDesignToolBarBackground}">
                            <TabPanel.Effect>
                                <DropShadowEffect ShadowDepth="0" Direction="270"/>
                            </TabPanel.Effect>
                        </TabPanel>
                        <ContentPresenter Panel.ZIndex="0" Grid.Row="1" ContentSource="SelectedContent" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TabItem}">
        <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Height" Value="35" />
        <Setter Property="material:RippleAssist.Feedback" Value="{DynamicResource MaterialDesignFlatButtonRipple}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="Root">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="ScaleTransform" From="0" To="1" Duration="0:0:0.2">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_BackgroundSelection" To="0.12" BeginTime="0:0:0.2" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unselected">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="ScaleTransform" To="0" Duration="0" />
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_BackgroundSelection" To="0" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <material:ColorZone Grid.RowSpan="2" x:Name="tabitemcz"
                                            HorizontalAlignment="Stretch"
                                            VerticalAlignment="Stretch"
                                            Focusable="False"
                                            Background="{x:Null}">
                            <material:Ripple Focusable="False"
                                                Content="{TemplateBinding Header}" 
                                                ContentTemplate="{TemplateBinding HeaderTemplate}"
                                                ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                                HorizontalContentAlignment="Center"
                                                VerticalContentAlignment="Center"
                                                RecognizesAccessKey="True"
                                                x:Name="contentPresenter"
                                                Opacity=".82"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                                Padding="{TemplateBinding Padding}"
                                                TextBlock.FontWeight="Bold"
                                                TextBlock.FontSize="14"
                                                TextOptions.TextFormattingMode="Ideal" 
                                                TextOptions.TextRenderingMode="Auto">
                            </material:Ripple>
                        </material:ColorZone>
                        <Border x:Name="SelectionHighlightBorder" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="0 0 0 2"
                                Visibility="Hidden" RenderTransformOrigin="0.5 0.5">
                            <Border.RenderTransform>
                                <ScaleTransform x:Name="ScaleTransform" ScaleX="0" ScaleY="1" />
                            </Border.RenderTransform>
                            <Rectangle x:Name="PART_BackgroundSelection" Fill="{TemplateBinding Background}" Opacity="0.12"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.23"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="1"/>
                            <Setter TargetName="SelectionHighlightBorder" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignToolBarPrimaryButton" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="35"/>
        <Setter Property="Height" Value="35"/>
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource Primary300}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueLightForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}" >
                    <Border Background="{TemplateBinding Background}" x:Name="border" CornerRadius="2">
                        <material:Ripple Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False"
                                         Feedback="{DynamicResource PrimaryHueMidForegroundBrush}"
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                         Padding="{TemplateBinding Padding}" 
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value=".56"/>
                            <Setter Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource Primary400}"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource Primary200}"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>